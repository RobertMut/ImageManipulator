using ImageManipulator.Common.Enums;
using ImageManipulator.Common.Interfaces;

namespace ImageManipulator.Common.Matrices
{
    public class ConvolutionMatrices9x9 : IConvolutionMatrix
    {
        public Dictionary<SoftenSharpenType, double[,]> SoftenSharpenMatrices { get; } = new()
        {
            {SoftenSharpenType.SoftenAverage,  new double[,]
                {
                    {1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1},
                    {1, 1, 1, 1, 1, 1, 1, 1, 1}
                }
            },
            {SoftenSharpenType.SoftenGauss,  new double[,]
                {
                    {1 ,  5 , 11 , 18 , 23 , 18 , 11 ,  5 ,  1 },
                    {5 , 25 , 55 , 91 ,128 , 91 , 55 , 25 ,  5 },
                    {11,  55, 121, 200, 275, 200, 121,  55,  11},
                    {18,  91, 200, 361, 484, 361, 200,  91,  18},
                    {23, 128, 275, 484, 649, 484, 275, 128,  23},
                    {18,  91, 200, 361, 484, 361, 200,  91,  18},
                    {11,  55, 121, 200, 275, 200, 121,  55,  11},
                    {5 , 25 , 55 , 91 ,128 , 91 , 55 , 25 ,  5 },
                    {1 ,  5 , 11 , 18 , 23 , 18 , 11 ,  5 ,  1 }
                }
            },
            {SoftenSharpenType.Laplace1,  new double[,]
                {
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, +8, +8, +8, -1, -1, -1},
                    {-1, -1, -1, +8, +8, +8, -1, -1, -1},
                    {-1, -1, -1, +8, +8, +8, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1},
                    {-1, -1, -1, -1, -1, -1, -1, -1, -1}
                }
            }
        };

        public Dictionary<SobelType, double[,]> SobelMatrices { get; } = new()
        {
            {SobelType.North,  new double[,]
                {
                    { 8, 8, 8, 8, 16, 8, 8, 8, 8  },
                    { 4, 4, 4, 4, 8, 4, 4, 4, 4  },
                    { 2, 2, 2, 2, 4, 2, 2, 2, 2  },
                    { 1, 1, 1, 1, 2, 1, 1, 1, 1  },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0},
                    { -1, -1, -1, -1, -2, -1, -1, -1, -1},
                    { -2, -2, -2, -2, -4, -2, -2, -2, -2},
                    { -4, -4, -4, -4, -8, -4, -4, -4, -4},
                    { -8, -8, -8, -8, -16, -8, -8, -8, -8}
                }
            },
            {SobelType.East,  new double[,]
                {
                    {-8, -4, -2, -1, 0, 1, 2, 4, 8},
                    {-8, -4, -2, -1, 0, 1, 2, 4, 8},
                    {-8, -4, -2, -1, 0, 1, 2, 4, 8},
                    {-16, -8, -4, -2, 0, 2, 4, 8, 16},
                    {-8, -4, -2, -1, 0, 1, 2, 4, 8},
                    {-8, -4, -2, -1, 0, 1, 2, 4, 8},
                    {-8, -4, -2, -1, 0, 1, 2, 4, 8}
                }
            },
            {SobelType.NorthEast,  new double[,]
                {
                    {0, 0, 0, 0, 1, 2,  4, 8, 16},
                    {0, 0, 0, 0, 1, 2,  4, 8, 8},
                    {0, 0, 0, 0, 1, 2,  4, 4, 4},
                    {0, 0, 0, 0, 1, 2,  2, 2, 2},
                    {-1, -1, -1, -1, 0, 1, 1, 1, 1},
                    {-2, -2, -2, -2, -1, 0, 0, 0, 0},
                    {-4, -4, -4, -2, -1, 0, 0, 0, 0},
                    {-8, -8, -4, -2, -1, 0, 0, 0, 0},
                    {-16, -8, -4, -2, -1, 0, 0, 0, 0}
                }
            },
            {SobelType.SouthEast,  new double[,]
                {
                    {-16, -8, -4, -2, -1, 0, 0, 0, 0},
                    {-8, -8, -4, -2, -1, 0, 0, 0, 0},
                    {-4, -4, -4, -2, -1, 0, 0, 0, 0},
                    {-2, -2, -2, -2, -1, 0, 0, 0, 0},
                    {-1, -1, -1, -1, 0,  1, 1, 1, 0},
                    {0, 0, 0, 0, 1, 2, 2, 2, 2 },
                    {0, 0, 0, 0, 1, 2, 4, 4, 4 },
                    {0, 0, 0, 0, 1, 2, 4, 8, 8 },
                    {0, 0, 0, 0, 1, 2, 4, 8, 16 }
                }
            },
            {SobelType.South,  new double[,]
                {
                    { -8, -8, -8, -8, -16,-8,-8,-8,-8  },
                    { -4, -4, -4, -4, -8, -4, -4, -4, -4  },
                    { -2, -2, -2, -2, -4, -2, -2, -2, -2  },
                    { -1, -1, -1, -1, -2, -1, -1, -1, -1  },
                    { 0, 0, 0, 0, 0, 0, 0, 0, 0},
                    { 1, 1, 1, 1, 2, 1, 1, 1, 1},
                   { 2, 2, 2, 2, 4, 2, 2, 2, 2},
                   { 4, 4, 4, 4, 8, 4, 4, 4, 4},
                   { 8, 8, 8, 8, 16,8,8,8,8}
                }
            },
            {SobelType.NorthWest,  new double[,]
                {
                    {16,8, 4, 2, 1, 0, 0, 0, 0},
                    {8, 8, 4, 2, 1, 0, 0, 0, 0},
                    {4, 4, 4, 2, 1, 0, 0, 0, 0},
                    {2, 2, 2, 2, 1, 0, 0, 0, 0},
                    {1, 1, 1, 1, 0,  -1, -1, -1, -1},
                    {0, 0, 0, 0, -1, -2, -2, -2, -2 },
                    {0, 0, 0, 0, -1, -2, -4, -4, -4 },
                    {0, 0, 0, 0, -1, -2, -4, -8, -8 },
                    {0, 0, 0, 0, -1, -2, -4, -8, -16 }
                }
            },
            {SobelType.West,  new double[,]
                {
                    {8, 4, 2, 1, 0, -1, -2, -4, -8},
                    {8, 4, 2, 1, 0, -1, -2, -4, -8},
                    {8, 4, 2, 1, 0, -1, -2, -4, -8},
                    {16,8,4,2, 0, -2, -4, -8, -16},
                    {8, 4, 2, 1, 0, -1, -2, -4, -8},
                    {8, 4, 2, 1, 0, -1, -2, -4, -8},
                    {8, 4, 2, 1, 0, -1, -2, -4, -8}
                }
            },
            {SobelType.SouthWest,  new double[,]
                {
                    {0, 0, 0, 0, -1, -2, -4, -8, -16},
                    {0, 0, 0, 0, -1, -2, -4, -8, -8},
                    {0, 0, 0, 0, -1, -2, -4, -4, -4},
                    {0, 0, 0, 0, -1, -2, -2, -2, -2},
                    {1, 1, 1, 1, 0, -1, -1, -1, -1},
                    {2, 2, 2, 2, 1, 0, 0, 0, 0},
                    {4, 4, 4, 2, 1, 0, 0, 0, 0},
                    {8, 8, 4, 2, 1, 0, 0, 0, 0},
                    {16,8, 4, 2, 1, 0, 0, 0, 0}
                }
            }
        };

        public double[,] SoftenAverageWithWeight(double weight)
        {
            return new[,]
            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, weight, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1}
            };
        }
    }
}